/*
 * Copyright (C) 2015- Supership Inc.
 */
package jp.supership.elasticsearch.plugin.queryparser.antlr.v4.util.internal;

import jp.supership.elasticsearch.plugin.queryparser.common.util.ObjectUtils;

/**
 * Provides common token values.
 * This class is responsible to handle key-value pairs which will be generated by the ANTLR.
 *
 * @author Shingo OKAWA
 * @since  1.0
 */
public final class Tokens {
    /**
     * Represents a code fragment which is tagged in accordance to its semantics.
     */
    public static final class Fragment {
	/** Holds raw text representation. */
	private final String text;
	/** Holds the corresponding tag. */
	private final Object tag;

	/**
	 * Constructor.
	 */
	public Fragment(String text, Object tag) {
	    this.text = text;
	    this.tag = tag;
	}

	/**
	 * Returns the corresponding text value.
	 * @return the corresponding text value.
	 */
	public String getText() {
	    return this.text;
	}

	/**
	 * Returns the corresponding tag value.
	 * @return the corresponding tag value.
	 */
	public Object getTag() {
	    return this.tag;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String toString() {
	    return this.text;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int hashCode() {
	    return this.tag.hashCode() * 31 + this.text.hashCode();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean equals(Object object) {
	    if (object instanceof Fragment) {
		Fragment that = (Fragment) object;
		return this.tag.equals(that.tag) && this.text.equals(that.text);
	    }
	    return false;
	}
    }

    /**
     * Pre-defined {@code Fragment} token taggs.
     */
    public enum Tag {
	/** Represents reserved words. */
	RESERVED,
	/** Represents identifiers. */
	STRING,
	/** Represents integers. */
	INTEGER,
	/** Represents decimal numbers. */
	DECIMAL
    }

    /**
     * Returns the {@code Fragment} tagged as {@code tag}.
     * @param  text the fragment text to be passed.
     * @param  tag the fragment tag to be passed.
     * @return the newly instanciated {@code Fragment}.
     */
    public static Fragment newFragment(String text, Object tag) {
	return new Fragment(text, tag);
    }

    /**
     * Returns the {@code Fragment} tagged as {@code Tag#RESERVED}.
     * @param  name the reserved word's name.
     * @return the instanciated {@code Fragment} tagged as {@code Tag#RESERVED}.
     */
    public static Fragment newReserved(String name) {
	return newFragment(name, Tag.RESERVED);
    }

    /**
     * Returns the {@code Fragment} tagged as {@code Tag#STRING}.
     * @param  name the string word's name.
     * @return the instanciated {@code Fragment} tagged as {@code Tag#STRING}.
     */
    public static Fragment newString(String name) {
	return newFragment(name, Tag.STRING);
    }

    /**
     * Returns the {@code Fragment} tagged as {@code Tag#INTEGER}.
     * @param  value the integer's string representation.
     * @return the instanciated {@code Fragment} tagged as {@code Tag#INTEGER}.
     */
    public static Fragment newInteger(String value) {
	return newFragment(value, Tag.INTEGER);
    }

    /**
     * Returns the {@code Fragment} tagged as {@code Tag#DECIMAL}.
     * @param  value the decimal's string representation.
     * @return the instanciated {@code Fragment} tagged as {@code Tag#DECIMAL}.
     */
    public static Fragment newDecimal(String value) {
	return newFragment(value, Tag.DECIMAL);
    }
}
