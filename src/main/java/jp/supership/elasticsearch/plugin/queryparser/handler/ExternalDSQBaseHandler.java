/*
 * Copyright (C) 2015- Supership Inc.
 */
package jp.supership.elasticsearch.plugin.queryparser.handler;

import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.misc.ParseCancellationException;
import org.antlr.v4.runtime.tree.ParseTree;
import org.apache.lucene.search.BooleanClause;
import org.apache.lucene.search.BooleanQuery;
import org.apache.lucene.search.Query;
import jp.supership.elasticsearch.plugin.queryparser.antlr.v4.dsl.ExternalQueryBaseVisitor;
import jp.supership.elasticsearch.plugin.queryparser.antlr.v4.dsl.ExternalQueryLexer;
import jp.supership.elasticsearch.plugin.queryparser.antlr.v4.dsl.ExternalQueryParser;
import jp.supership.elasticsearch.plugin.queryparser.antlr.v4.util.HandleException;
import jp.supership.elasticsearch.plugin.queryparser.antlr.v4.util.QueryHandler;
import jp.supership.elasticsearch.plugin.queryparser.handlers.Initializable;
import jp.supership.elasticsearch.plugin.queryparser.lucene.util.ParseException;
import jp.supership.elasticsearch.plugin.queryparser.lucene.util.QueryEngine;

/**
 * This class is responsible for handling query parser generated by ANTLR4 and delegates internal
 * Lucene APIs through the internal QueryEngine implementation.
 * The utilizing parser is generated by {@code jp.supership.elasticsearch.plugin.dsl.ExternalQuery#g4},
 * hence the corresponding grammer is for "user land" queries.
 *
 * @author Shingo OKAWA
 * @since  1.0
 */
abstract class ExternalDSQBaseHandler extends ExternalQueryBaseVisitor<Query> implements QueryHandler, Initializable {
    /**
     * Represents domain specific query context, besides holding the query constructing settings
     * this class is also responsible to maintain the currently constructing {@code Query} instance
     * which will be handled with the {@code Engine}.
     */
    protected class State extends QueryHandler.Context {
	/** Holds currently constructing query. */
	public Query query = null;
	/** Holds constructing clauses. */
	public List<BooleanClause> clauses = new ArrayList<BooleanClause>();
	/** Holds previously detected cunjuntion. */
	public int conjunction = -1;
	/** Holds previously detected modifier. */
	public int modifier = -1;
    }

    /** Holds this handler's context. */
    protected ExternalDSQBaseHandler.State state = new ExternalDSQBaseHandler.State();

    /** Holds query engine which is reponsible for parsing raw query strings. */
    protected QueryEngine engine;

    /** Holds query engine which is reponsible for parsing raw query strings. */
    protected Reader input;

    /**
     * {@inheritDoc}
     */
    @Override
    public Query visitQuery(ExternalQueryParser.QueryContext context) {
	try {
	    for (ExternalQueryParser.ExpressionContext expression : context.expression()) {
		this.state.conjunction = context.conjunction == null ? ExternalQueryParser.CONJUNCTION_AND : context.conjunction.getType();
		this.state.query = visit(expression);
		this.engine.conjugate(this.state.clauses, this.state.conjunction, this.state.modifier, this.state.query);
	    }

	    if (this.state.clauses.size() == 1 && this.state.query != null) {
		return this.state.query;
	    } else {
		return this.engine.getBooleanQuery(this.state.clauses);
	    }
	} catch (Exception cause) {
	    throw new ParseCancellationException(cause);
	}
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Query visitExpression(ExternalQueryParser.ExpressionContext context) {
	try {
	    this.state.modifier = context.modifier == null ? ExternalQueryParser.MODIFIER_REQUIRE : context.modifier.getType();
	    this.state.field = context.FIELD().getText();
	    return visit(context.term());
	} catch (Exception cause) {
	    throw new ParseCancellationException(cause);
	}
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Query visitStringTerm(ExternalQueryParser.StringTermContext context) {
	try {
	    this.state.term = context.TERM_STRING().getText();
	    return this.dispatchQuotedToken(this.state);
	} catch (Exception cause) {
	    throw new ParseCancellationException(cause);
	}
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Query visitNumberTerm(ExternalQueryParser.NumberTermContext context) {
	try {
	    this.state.term = context.TERM_NUMBER().getText();
	    return this.dispatchBareToken(this.state);
	} catch (Exception cause) {
	    throw new ParseCancellationException(cause);
	}
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Query visitFieldTerm(ExternalQueryParser.FieldTermContext context) {
	try {
	    this.state.term = context.TERM_FIELD().getText();
	    return this.dispatchBareToken(this.state);
	} catch (Exception cause) {
	    throw new ParseCancellationException(cause);
	}
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Query visitSubQueryTerm(ExternalQueryParser.SubQueryTermContext context) {
	try {
	    return visit(context.query());
	} catch (Exception cause) {
	    throw new ParseCancellationException(cause);
	}
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Query handle(String queryText) throws HandleException {
        this.fetch(new StringReader(queryText));
        try {
            Query instanciated = this.visit();
            return instanciated != null ? instanciated : this.engine.getBooleanQuery(false);
        } catch (HandleException cause) {
            HandleException exception = new HandleException("could not parse '" + queryText + "': " + cause.getMessage());
            exception.initCause(cause);
            throw exception;
        } catch (BooleanQuery.TooManyClauses cause) {
            HandleException exception = new HandleException("could not parse '" + queryText + "': too many boolean clauses");
            exception.initCause(cause);
            throw exception;
        }
    }

    /**
     * Visits AST and generates {@code Query}.
     * @throws HandleException if the handling fails.
     */
    private Query visit() throws HandleException {
        try {
            ANTLRInputStream input = new ANTLRInputStream(this.input);
            ExternalQueryLexer lexer = new ExternalQueryLexer(input);
            CommonTokenStream tokens = new CommonTokenStream(lexer);
            ExternalQueryParser parser = new ExternalQueryParser(tokens);
            ParseTree tree = parser.query();
            return this.visit(tree);
        } catch (Exception cause) {
            throw new HandleException(cause);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Query dispatchBareToken(QueryHandler.Context context) throws HandleException {
        return this.engine.dispatchBareToken(context);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Query dispatchQuotedToken(QueryHandler.Context context) throws HandleException {
        return this.engine.dispatchQuotedToken(context);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void fetch(Reader input) {
        this.input = input;
    }
}
